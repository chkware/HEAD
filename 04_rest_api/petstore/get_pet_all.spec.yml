---
version: 0.1
describe: "get_pet_all {:page} {:per_page}"

vars:
  :page: 1
  :per_page: :global.page_size.regular
  :pets:
    - *:global.models.paged_result
    - "data": "nullable|array|max:{:per_page}"
    - "data.*": required|of_struct:*:specs.get_pet_by_id.model_pet

specs:
  - it: get_with_page
    default: true
    request_without:
      - url.query_vars
    asserts:
      - {type: assertEquals, actual: .code, expected: 200}
      - {type: assertEquals, actual: .headers.Content-Type, expected: application/json}
      - {type: assertJsonStruct, actual: .body, rule: :global.models.collect}

  - it: get_with_page_from_arg
    request_with:
      query_vars:
        page: :page
        per_page: :per_page
    asserts:
      - {type: assertEquals, actual: .code, expected: 200}
      - {type: assertEquals, actual: .headers.Content-Type, expected: application/json}
      - {type: assertJsonStruct, actual: .body, rule: :global.models.collect}

  - it: get_with_page_as_string
    request_with:
      query_vars:
        page: "invalid str"
        per_page: 100
    asserts:
      - {type: assertEquals, actual: .code, expected: 200}

request:
  url:
    path: :global.server/pets
    query_vars:
      page: :page
      per_page: :per_page
  method: GET
  headers: ~
  response*: :response
  expose*:
    - :response
